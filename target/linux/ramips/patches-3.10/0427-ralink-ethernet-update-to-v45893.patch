Index: linux-3.10.49/drivers/net/ethernet/ralink/ralink_ethtool.c
===================================================================
--- linux-3.10.49/drivers/net/ethernet/ralink/ralink_ethtool.c
+++ linux-3.10.49/drivers/net/ethernet/ralink/ralink_ethtool.c
@@ -144,8 +144,8 @@
 
 	dev->netdev_ops->ndo_stop(dev);
 
-	priv->tx_ring_size = BIT(fls(ring->tx_pending) - 1);
-	priv->rx_ring_size = BIT(fls(ring->rx_pending) - 1);
+	priv->tx_ring.tx_ring_size = BIT(fls(ring->tx_pending) - 1);
+	priv->rx_ring.rx_ring_size = BIT(fls(ring->rx_pending) - 1);
 
 	dev->netdev_ops->ndo_open(dev);
 
@@ -159,8 +159,8 @@
 
 	ring->rx_max_pending = MAX_DMA_DESC;
 	ring->tx_max_pending = MAX_DMA_DESC;
-	ring->rx_pending = priv->rx_ring_size;
-	ring->tx_pending = priv->tx_ring_size;
+	ring->rx_pending = priv->rx_ring.rx_ring_size;
+	ring->tx_pending = priv->tx_ring.tx_ring_size;
 }
 
 
Index: linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.c
===================================================================
--- linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.c
+++ linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.c
@@ -56,8 +56,8 @@
 
 #define TX_DMA_DESP2_DEF	(TX_DMA_LS0 | TX_DMA_DONE)
 #define TX_DMA_DESP4_DEF	(TX_DMA_QN(3) | TX_DMA_PN(1))
-#define NEXT_TX_DESP_IDX(X)	(((X) + 1) & (priv->tx_ring_size - 1))
-#define NEXT_RX_DESP_IDX(X)	(((X) + 1) & (priv->rx_ring_size - 1))
+#define NEXT_TX_DESP_IDX(X)	(((X) + 1) & (ring->tx_ring_size - 1))
+#define NEXT_RX_DESP_IDX(X)	(((X) + 1) & (ring->rx_ring_size - 1))
 
 #define SYSC_REG_RSTCTRL	0x34
 
@@ -202,77 +202,80 @@
 static void fe_clean_rx(struct fe_priv *priv)
 {
 	int i;
+	struct fe_rx_ring *ring = &priv->rx_ring;
 
-	if (priv->rx_data) {
-		for (i = 0; i < priv->tx_ring_size; i++)
-			if (priv->rx_data[i]) {
-				if (priv->rx_dma && priv->rx_dma[i].rxd1)
+	if (ring->rx_data) {
+		for (i = 0; i < ring->rx_ring_size; i++)
+			if (ring->rx_data[i]) {
+				if (ring->rx_dma && ring->rx_dma[i].rxd1)
 					dma_unmap_single(&priv->netdev->dev,
-							priv->rx_dma[i].rxd1,
-							priv->rx_buf_size,
+							ring->rx_dma[i].rxd1,
+							ring->rx_buf_size,
 							DMA_FROM_DEVICE);
-				put_page(virt_to_head_page(priv->rx_data[i]));
+				put_page(virt_to_head_page(ring->rx_data[i]));
 			}
 
-		kfree(priv->rx_data);
-		priv->rx_data = NULL;
+		kfree(ring->rx_data);
+		ring->rx_data = NULL;
 	}
 
-	if (priv->rx_dma) {
+	if (ring->rx_dma) {
 		dma_free_coherent(&priv->netdev->dev,
-				priv->tx_ring_size * sizeof(*priv->rx_dma),
-				priv->rx_dma,
-				priv->rx_phys);
-		priv->rx_dma = NULL;
+				ring->rx_ring_size * sizeof(*ring->rx_dma),
+				ring->rx_dma,
+				ring->rx_phys);
+		ring->rx_dma = NULL;
 	}
 }
 
 static int fe_alloc_rx(struct fe_priv *priv)
 {
 	struct net_device *netdev = priv->netdev;
+	struct fe_rx_ring *ring = &priv->rx_ring;
 	int i, pad;
 
-	priv->rx_data = kcalloc(priv->tx_ring_size, sizeof(*priv->rx_data),
+	ring->rx_data = kcalloc(ring->rx_ring_size, sizeof(*ring->rx_data),
 			GFP_KERNEL);
-	if (!priv->rx_data)
+	if (!ring->rx_data)
 		goto no_rx_mem;
 
-	for (i = 0; i < priv->tx_ring_size; i++) {
-		priv->rx_data[i] = netdev_alloc_frag(priv->frag_size);
-		if (!priv->rx_data[i])
+	for (i = 0; i < ring->rx_ring_size; i++) {
+		ring->rx_data[i] = netdev_alloc_frag(ring->frag_size);
+		if (!ring->rx_data[i])
 			goto no_rx_mem;
 	}
 
-	priv->rx_dma = dma_alloc_coherent(&netdev->dev,
-			priv->tx_ring_size * sizeof(*priv->rx_dma),
-			&priv->rx_phys,
+	ring->rx_dma = dma_alloc_coherent(&netdev->dev,
+			ring->rx_ring_size * sizeof(*ring->rx_dma),
+			&ring->rx_phys,
 			GFP_ATOMIC | __GFP_ZERO);
-	if (!priv->rx_dma)
+	if (!ring->rx_dma)
 		goto no_rx_mem;
 
 	if (priv->flags & FE_FLAG_RX_2B_OFFSET)
 		pad = 0;
 	else
 		pad = NET_IP_ALIGN;
-	for (i = 0; i < priv->tx_ring_size; i++) {
+	for (i = 0; i < ring->rx_ring_size; i++) {
 		dma_addr_t dma_addr = dma_map_single(&netdev->dev,
-				priv->rx_data[i] + NET_SKB_PAD + pad,
-				priv->rx_buf_size,
+				ring->rx_data[i] + NET_SKB_PAD + pad,
+				ring->rx_buf_size,
 				DMA_FROM_DEVICE);
 		if (unlikely(dma_mapping_error(&netdev->dev, dma_addr)))
 			goto no_rx_mem;
-		priv->rx_dma[i].rxd1 = (unsigned int) dma_addr;
+		ring->rx_dma[i].rxd1 = (unsigned int) dma_addr;
 
 		if (priv->flags & FE_FLAG_RX_SG_DMA)
-			priv->rx_dma[i].rxd2 = RX_DMA_PLEN0(priv->rx_buf_size);
+			ring->rx_dma[i].rxd2 = RX_DMA_PLEN0(ring->rx_buf_size);
 		else
-			priv->rx_dma[i].rxd2 = RX_DMA_LSO;
+			ring->rx_dma[i].rxd2 = RX_DMA_LSO;
 	}
+	ring->rx_calc_idx = ring->rx_ring_size - 1;
 	wmb();
 
-	fe_reg_w32(priv->rx_phys, FE_REG_RX_BASE_PTR0);
-	fe_reg_w32(priv->tx_ring_size, FE_REG_RX_MAX_CNT0);
-	fe_reg_w32((priv->tx_ring_size - 1), FE_REG_RX_CALC_IDX0);
+	fe_reg_w32(ring->rx_phys, FE_REG_RX_BASE_PTR0);
+	fe_reg_w32(ring->rx_ring_size, FE_REG_RX_MAX_CNT0);
+	fe_reg_w32(ring->rx_calc_idx, FE_REG_RX_CALC_IDX0);
 	fe_reg_w32(FE_PST_DRX_IDX0, FE_REG_PDMA_RST_CFG);
 
 	return 0;
@@ -281,6 +284,7 @@
 	return -ENOMEM;
 }
 
+
 static void fe_txd_unmap(struct device *dev, struct fe_tx_buf *tx_buf)
 {
 	if (tx_buf->flags & FE_TX_FLAGS_SINGLE0) {
@@ -310,51 +314,56 @@
 static void fe_clean_tx(struct fe_priv *priv)
 {
 	int i;
+	struct device *dev = &priv->netdev->dev;
+	struct fe_tx_ring *ring = &priv->tx_ring;
 
-	if (priv->tx_buf) {
-		for (i = 0; i < priv->tx_ring_size; i++)
-			fe_txd_unmap(&priv->netdev->dev, &priv->tx_buf[i]);
-		kfree(priv->tx_buf);
-		priv->tx_buf = NULL;
+	if (ring->tx_buf) {
+		for (i = 0; i < ring->tx_ring_size; i++)
+			fe_txd_unmap(dev, &ring->tx_buf[i]);
+		kfree(ring->tx_buf);
+		ring->tx_buf = NULL;
+	}
+
+	if (ring->tx_dma) {
+		dma_free_coherent(dev,
+				ring->tx_ring_size * sizeof(*ring->tx_dma),
+				ring->tx_dma,
+				ring->tx_phys);
+		ring->tx_dma = NULL;
 	}
 
-	if (priv->tx_dma) {
-		dma_free_coherent(&priv->netdev->dev,
-				priv->tx_ring_size * sizeof(*priv->tx_dma),
-				priv->tx_dma,
-				priv->tx_phys);
-		priv->tx_dma = NULL;
-	}
+	netdev_reset_queue(priv->netdev);
 }
 
 static int fe_alloc_tx(struct fe_priv *priv)
 {
 	int i;
+	struct fe_tx_ring *ring = &priv->tx_ring;
 
-	priv->tx_free_idx = 0;
+	ring->tx_free_idx = 0;
 
-	priv->tx_buf = kcalloc(priv->tx_ring_size, sizeof(*priv->tx_buf),
+	ring->tx_buf = kcalloc(ring->tx_ring_size, sizeof(*ring->tx_buf),
 			GFP_KERNEL);
-	if (!priv->tx_buf)
+	if (!ring->tx_buf)
 		goto no_tx_mem;
 
-	priv->tx_dma = dma_alloc_coherent(&priv->netdev->dev,
-			priv->tx_ring_size * sizeof(*priv->tx_dma),
-			&priv->tx_phys,
+	ring->tx_dma = dma_alloc_coherent(&priv->netdev->dev,
+			ring->tx_ring_size * sizeof(*ring->tx_dma),
+			&ring->tx_phys,
 			GFP_ATOMIC | __GFP_ZERO);
-	if (!priv->tx_dma)
+	if (!ring->tx_dma)
 		goto no_tx_mem;
 
-	for (i = 0; i < priv->tx_ring_size; i++) {
+	for (i = 0; i < ring->tx_ring_size; i++) {
 		if (priv->soc->tx_dma) {
-			priv->soc->tx_dma(&priv->tx_dma[i]);
+			priv->soc->tx_dma(&ring->tx_dma[i]);
 		}
-		priv->tx_dma[i].txd2 = TX_DMA_DESP2_DEF;
+		ring->tx_dma[i].txd2 = TX_DMA_DESP2_DEF;
 	}
 	wmb();
 
-	fe_reg_w32(priv->tx_phys, FE_REG_TX_BASE_PTR0);
-	fe_reg_w32(priv->tx_ring_size, FE_REG_TX_MAX_CNT0);
+	fe_reg_w32(ring->tx_phys, FE_REG_TX_BASE_PTR0);
+	fe_reg_w32(ring->tx_ring_size, FE_REG_TX_MAX_CNT0);
 	fe_reg_w32(0, FE_REG_TX_CTX_IDX0);
 	fe_reg_w32(FE_PST_DTX_IDX0, FE_REG_PDMA_RST_CFG);
 
@@ -383,8 +392,6 @@
 {
 	fe_clean_tx(priv);
 	fe_clean_rx(priv);
-
-	netdev_reset_queue(priv->netdev);
 }
 
 void fe_stats_update(struct fe_priv *priv)
@@ -514,7 +521,7 @@
 	u32 idx = (vid & 0xf);
 
 	if (!((fe_reg_table[FE_REG_FE_DMA_VID_BASE]) &&
-				(dev->features | NETIF_F_HW_VLAN_CTAG_TX)))
+				(dev->features & NETIF_F_HW_VLAN_CTAG_TX)))
 		return 0;
 
 	clear_bit(idx, &priv->vlan_map);
@@ -523,7 +530,7 @@
 }
 
 static int fe_tx_map_dma(struct sk_buff *skb, struct net_device *dev,
-		int idx, int tx_num)
+		int idx, int tx_num, struct fe_tx_ring *ring)
 {
 	struct fe_priv *priv = netdev_priv(dev);
 	struct skb_frag_struct *frag;
@@ -534,7 +541,7 @@
 	u32 def_txd4;
 	int i, j, k, frag_size, frag_map_size, offset;
 
-	tx_buf = &priv->tx_buf[idx];
+	tx_buf = &ring->tx_buf[idx];
 	memset(tx_buf, 0, sizeof(*tx_buf));
 	memset(&txd, 0, sizeof(txd));
 	nr_frags = skb_shinfo(skb)->nr_frags;
@@ -606,7 +613,7 @@
 				txd.txd2 = TX_DMA_PLEN0(frag_map_size);
 				txd.txd4 = def_txd4;
 
-				tx_buf = &priv->tx_buf[j];
+				tx_buf = &ring->tx_buf[j];
 				memset(tx_buf, 0, sizeof(*tx_buf));
 
 				tx_buf->flags |= FE_TX_FLAGS_PAGE0;
@@ -623,7 +630,7 @@
 
 				if (!((i == (nr_frags -1)) &&
 							(frag_map_size == frag_size))) {
-					fe_set_txd(&txd, &priv->tx_dma[j]);
+					fe_set_txd(&txd, &ring->tx_dma[j]);
 					memset(&txd, 0, sizeof(txd));
 				}
 			}
@@ -638,7 +645,7 @@
 		txd.txd2 |= TX_DMA_LS1;
 	else
 		txd.txd2 |= TX_DMA_LS0;
-	fe_set_txd(&txd, &priv->tx_dma[j]);
+	fe_set_txd(&txd, &ring->tx_dma[j]);
 
 	/* store skb to cleanup */
 	tx_buf->skb = skb;
@@ -655,8 +662,8 @@
 err_dma:
 	j = idx;
 	for (i = 0; i < tx_num; i++) {
-		ptxd = &priv->tx_dma[j];
-		tx_buf = &priv->tx_buf[j];
+		ptxd = &ring->tx_dma[j];
+		tx_buf = &ring->tx_buf[j];
 
 		/* unmap dma */
 		fe_txd_unmap(&dev->dev, tx_buf);
@@ -700,10 +707,10 @@
 	return ret;
 }
 
-static inline u32 fe_empty_txd(struct fe_priv *priv, u32 tx_fill_idx)
+static inline u32 fe_empty_txd(struct fe_tx_ring *ring, u32 tx_fill_idx)
 {
-	return (u32)(priv->tx_ring_size - ((tx_fill_idx - priv->tx_free_idx) &
-				(priv->tx_ring_size - 1)));
+	return (u32)(ring->tx_ring_size - ((tx_fill_idx - ring->tx_free_idx) &
+				(ring->tx_ring_size - 1)));
 }
 
 static inline int fe_cal_txd_req(struct sk_buff *skb)
@@ -727,6 +734,7 @@
 static int fe_start_xmit(struct sk_buff *skb, struct net_device *dev)
 {
 	struct fe_priv *priv = netdev_priv(dev);
+	struct fe_tx_ring *ring = &priv->tx_ring;
 	struct net_device_stats *stats = &dev->stats;
 	u32 tx;
 	int tx_num;
@@ -739,7 +747,7 @@
 
 	tx_num = fe_cal_txd_req(skb);
 	tx = fe_reg_r32(FE_REG_TX_CTX_IDX0);
-	if (unlikely(fe_empty_txd(priv, tx) <= tx_num))
+	if (unlikely(fe_empty_txd(ring, tx) <= tx_num))
 	{
 		netif_stop_queue(dev);
 		netif_err(priv, tx_queued,dev,
@@ -747,7 +755,7 @@
 		return NETDEV_TX_BUSY;
 	}
 
-	if (fe_tx_map_dma(skb, dev, tx, tx_num) < 0) {
+	if (fe_tx_map_dma(skb, dev, tx, tx_num, ring) < 0) {
 		stats->tx_dropped++;
 	} else {
 		stats->tx_packets++;
@@ -777,8 +785,9 @@
 	struct net_device *netdev = priv->netdev;
 	struct net_device_stats *stats = &netdev->stats;
 	struct fe_soc_data *soc = priv->soc;
+	struct fe_rx_ring *ring = &priv->rx_ring;
+	int idx = ring->rx_calc_idx;
 	u32 checksum_bit;
-	int idx = fe_reg_r32(FE_REG_RX_CALC_IDX0);
 	struct sk_buff *skb;
 	u8 *data, *new_data;
 	struct fe_rx_dma *rxd, trxd;
@@ -799,22 +808,22 @@
 		unsigned int pktlen;
 		dma_addr_t dma_addr;
 		idx = NEXT_RX_DESP_IDX(idx);
-		rxd = &priv->rx_dma[idx];
-		data = priv->rx_data[idx];
+		rxd = &ring->rx_dma[idx];
+		data = ring->rx_data[idx];
 
 		fe_get_rxd(&trxd, rxd);
 		if (!(trxd.rxd2 & RX_DMA_DONE))
 			break;
 
 		/* alloc new buffer */
-		new_data = netdev_alloc_frag(priv->frag_size);
+		new_data = netdev_alloc_frag(ring->frag_size);
 		if (unlikely(!new_data)) {
 			stats->rx_dropped++;
 			goto release_desc;
 		}
 		dma_addr = dma_map_single(&netdev->dev,
 				new_data + NET_SKB_PAD + pad,
-				priv->rx_buf_size,
+				ring->rx_buf_size,
 				DMA_FROM_DEVICE);
 		if (unlikely(dma_mapping_error(&netdev->dev, dma_addr))) {
 			put_page(virt_to_head_page(new_data));
@@ -822,7 +831,7 @@
 		}
 
 		/* receive data */
-		skb = build_skb(data, priv->frag_size);
+		skb = build_skb(data, ring->frag_size);
 		if (unlikely(!skb)) {
 			put_page(virt_to_head_page(new_data));
 			goto release_desc;
@@ -830,7 +839,7 @@
 		skb_reserve(skb, NET_SKB_PAD + NET_IP_ALIGN);
 
 		dma_unmap_single(&netdev->dev, trxd.rxd1,
-				priv->rx_buf_size, DMA_FROM_DEVICE);
+				ring->rx_buf_size, DMA_FROM_DEVICE);
 		pktlen = RX_DMA_PLEN0(trxd.rxd2);
 		skb->dev = netdev;
 		skb_put(skb, pktlen);
@@ -848,17 +857,18 @@
 
 		napi_gro_receive(napi, skb);
 
-		priv->rx_data[idx] = new_data;
+		ring->rx_data[idx] = new_data;
 		rxd->rxd1 = (unsigned int) dma_addr;
 
 release_desc:
 		if (priv->flags & FE_FLAG_RX_SG_DMA)
-			rxd->rxd2 = RX_DMA_PLEN0(priv->rx_buf_size);
+			rxd->rxd2 = RX_DMA_PLEN0(ring->rx_buf_size);
 		else
 			rxd->rxd2 = RX_DMA_LSO;
 
+		ring->rx_calc_idx = idx;
 		wmb();
-		fe_reg_w32(idx, FE_REG_RX_CALC_IDX0);
+		fe_reg_w32(ring->rx_calc_idx, FE_REG_RX_CALC_IDX0);
 		done++;
 	}
 
@@ -868,7 +878,8 @@
 	return done;
 }
 
-static int fe_poll_tx(struct fe_priv *priv, int budget, u32 tx_intr)
+static int fe_poll_tx(struct fe_priv *priv, int budget, u32 tx_intr,
+		int *tx_again)
 {
 	struct net_device *netdev = priv->netdev;
 	struct device *dev = &netdev->dev;
@@ -877,13 +888,13 @@
 	struct fe_tx_buf *tx_buf;
 	int done = 0;
 	u32 idx, hwidx;
+	struct fe_tx_ring *ring = &priv->tx_ring;
 
+	idx = ring->tx_free_idx;
 	hwidx = fe_reg_r32(FE_REG_TX_DTX_IDX0);
-	idx = priv->tx_free_idx;
 
-txpoll_again:
 	while ((idx != hwidx) && budget) {
-		tx_buf = &priv->tx_buf[idx];
+		tx_buf = &ring->tx_buf[idx];
 		skb = tx_buf->skb;
 
 		if (!skb)
@@ -897,35 +908,35 @@
 		fe_txd_unmap(dev, tx_buf);
 		idx = NEXT_TX_DESP_IDX(idx);
 	}
-	priv->tx_free_idx = idx;
+	ring->tx_free_idx = idx;
 
-	if (!done)
-		return 0;
-
-	if (budget) {
-		fe_reg_w32(tx_intr, FE_REG_FE_INT_STATUS);
+	if (idx == hwidx) {
+		/* read hw index again make sure no new tx packet */
 		hwidx = fe_reg_r32(FE_REG_TX_DTX_IDX0);
-		if (idx != hwidx)
-			goto txpoll_again;
-	}
-	
-	if (!done)
-		return 0;
+		if (idx == hwidx)
+			fe_reg_w32(tx_intr, FE_REG_FE_INT_STATUS);
+		else
+			*tx_again = 1;
+	} else
+		*tx_again = 1;
 
-	netdev_completed_queue(netdev, done, bytes_compl);
-	if (unlikely(netif_queue_stopped(netdev) &&
-				netif_carrier_ok(netdev))) {
-		netif_wake_queue(netdev);
+	if (done) {
+		netdev_completed_queue(netdev, done, bytes_compl);
+		if (unlikely(netif_queue_stopped(netdev) &&
+					netif_carrier_ok(netdev))) {
+			netif_wake_queue(netdev);
+		}
 	}
 
 	return done;
 }
 
+
 static int fe_poll(struct napi_struct *napi, int budget)
 {
 	struct fe_priv *priv = container_of(napi, struct fe_priv, rx_napi);
 	struct fe_hw_stats *hwstat = priv->hw_stats;
-	int tx_done, rx_done;
+	int tx_done, rx_done, tx_again;
 	u32 status, fe_status, status_reg, mask;
 	u32 tx_intr, rx_intr, status_intr;
 
@@ -933,7 +944,7 @@
 	tx_intr = priv->soc->tx_int;
 	rx_intr = priv->soc->rx_int;
 	status_intr = priv->soc->status_int;
-	tx_done = rx_done = 0;
+	tx_done = rx_done = tx_again = 0;
 
 	if (fe_reg_table[FE_REG_FE_INT_STATUS2]) {
 		fe_status = fe_reg_r32(FE_REG_FE_INT_STATUS2);
@@ -942,7 +953,7 @@
 		status_reg = FE_REG_FE_INT_STATUS;
 
 	if (status & tx_intr)
-		tx_done = fe_poll_tx(priv, budget, tx_intr);
+		tx_done = fe_poll_tx(priv, budget, tx_intr, &tx_again);
 
 	if (status & rx_intr)
 		rx_done = fe_poll_rx(napi, budget, priv, rx_intr);
@@ -953,7 +964,7 @@
 			spin_unlock(&hwstat->stats_lock);
 		}
 		fe_reg_w32(status_intr, status_reg);
-	}	
+	}
 
 	if (unlikely(netif_msg_intr(priv))) {
 		mask = fe_reg_r32(FE_REG_FE_INT_ENABLE);
@@ -962,7 +973,7 @@
 				tx_done, rx_done, status, mask);
 	}
 
-	if ((tx_done < budget) && (rx_done < budget)) {
+	if (!tx_again && (rx_done < budget)) {
 		status = fe_reg_r32(FE_REG_FE_INT_STATUS);
 		if (status & (tx_intr | rx_intr ))
 			goto poll_again;
@@ -978,6 +989,7 @@
 static void fe_tx_timeout(struct net_device *dev)
 {
 	struct fe_priv *priv = netdev_priv(dev);
+	struct fe_tx_ring *ring = &priv->tx_ring;	
 
 	priv->netdev->stats.tx_errors++;
 	netif_err(priv, tx_err, dev,
@@ -990,7 +1002,7 @@
 			fe_reg_r32(FE_REG_TX_MAX_CNT0),
 			fe_reg_r32(FE_REG_TX_CTX_IDX0),
 			fe_reg_r32(FE_REG_TX_DTX_IDX0),
-			priv->tx_free_idx
+			ring->tx_free_idx
 		  );
 	netif_info(priv, drv, dev, "rx_ring=%d, " \
 			"base=%08x, max=%u, calc=%u, drx=%u\n", 0,
@@ -1156,7 +1168,6 @@
 		goto err_out;
 
 	spin_lock_irqsave(&priv->page_lock, flags);
-	napi_enable(&priv->rx_napi);
 
 	val = FE_TX_WB_DDONE | FE_RX_DMA_EN | FE_TX_DMA_EN;
 	if (priv->flags & FE_FLAG_RX_2B_OFFSET)
@@ -1172,8 +1183,9 @@
 	if (priv->soc->has_carrier && priv->soc->has_carrier(priv))
 		netif_carrier_on(dev);
 
-	netif_start_queue(dev);
+	napi_enable(&priv->rx_napi);
 	fe_int_enable(priv->soc->tx_int | priv->soc->rx_int);
+	netif_start_queue(dev);
 
 	return 0;
 
@@ -1188,15 +1200,14 @@
 	unsigned long flags;
 	int i;
 
-	fe_int_disable(priv->soc->tx_int | priv->soc->rx_int);
-
 	netif_tx_disable(dev);
+	fe_int_disable(priv->soc->tx_int | priv->soc->rx_int);
+	napi_disable(&priv->rx_napi);	
 
 	if (priv->phy)
 		priv->phy->stop(priv);
 
 	spin_lock_irqsave(&priv->page_lock, flags);
-	napi_disable(&priv->rx_napi);
 
 	fe_reg_w32(fe_reg_r32(FE_REG_PDMA_GLO_CFG) &
 		     ~(FE_TX_WB_DDONE | FE_RX_DMA_EN | FE_TX_DMA_EN),
@@ -1327,10 +1338,10 @@
 		return 0;
 
 	if (new_mtu <= ETH_DATA_LEN)
-		priv->frag_size = fe_max_frag_size(ETH_DATA_LEN);
+		priv->rx_ring.frag_size = fe_max_frag_size(ETH_DATA_LEN);
 	else
-		priv->frag_size = PAGE_SIZE;
-	priv->rx_buf_size = fe_max_buf_size(priv->frag_size);
+		priv->rx_ring.frag_size = PAGE_SIZE;
+	priv->rx_ring.rx_buf_size = fe_max_buf_size(priv->rx_ring.frag_size);
 
 	if (!netif_running(dev))
 		return 0;
@@ -1482,16 +1493,16 @@
 	priv->device = &pdev->dev;
 	priv->soc = soc;
 	priv->msg_enable = netif_msg_init(fe_msg_level, FE_DEFAULT_MSG_ENABLE);
-	priv->frag_size = fe_max_frag_size(ETH_DATA_LEN);
-	priv->rx_buf_size = fe_max_buf_size(priv->frag_size);
-	priv->tx_ring_size = priv->rx_ring_size = NUM_DMA_DESC;
+	priv->rx_ring.frag_size = fe_max_frag_size(ETH_DATA_LEN);
+	priv->rx_ring.rx_buf_size = fe_max_buf_size(priv->rx_ring.frag_size);
+	priv->tx_ring.tx_ring_size = priv->rx_ring.rx_ring_size = NUM_DMA_DESC;
 	INIT_WORK(&priv->pending_work, fe_pending_work);
 
 	napi_weight = 32;
 	if (priv->flags & FE_FLAG_NAPI_WEIGHT) {
 		napi_weight *= 4;
-		priv->tx_ring_size *= 4;
-		priv->rx_ring_size *= 4;
+		priv->tx_ring.tx_ring_size *= 4;
+		priv->rx_ring.rx_ring_size *= 4;
 	}
 	netif_napi_add(netdev, &priv->rx_napi, fe_poll, napi_weight);
 	fe_set_ethtool_ops(netdev);
Index: linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.h
===================================================================
--- linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.h
+++ linux-3.10.49/drivers/net/ethernet/ralink/ralink_soc_eth.h
@@ -448,6 +448,27 @@
 	DEFINE_DMA_UNMAP_LEN(dma_len1);
 };
 
+struct fe_tx_ring
+{
+	struct fe_tx_dma *tx_dma;
+	struct fe_tx_buf *tx_buf;
+	dma_addr_t tx_phys;
+	u16 tx_ring_size;
+	u16 tx_free_idx;
+};
+
+struct fe_rx_ring
+{
+	struct fe_rx_dma *rx_dma;
+	u8 **rx_data;
+	dma_addr_t rx_phys;
+	u16 rx_ring_size;
+	u16 frag_size;
+	u16 rx_buf_size;
+	u16 rx_calc_idx;
+};
+
+
 struct fe_priv
 {
 	spinlock_t			page_lock;
@@ -460,17 +481,10 @@
 	struct device			*device;
 	unsigned long			sysclk;
 
-	u16				frag_size;
-	u16				rx_buf_size;
-	struct fe_rx_dma		*rx_dma;
-	u8				**rx_data;
-	dma_addr_t			rx_phys;
+	struct fe_rx_ring		rx_ring;
 	struct napi_struct		rx_napi;
-
-	struct fe_tx_dma		*tx_dma;
-	struct fe_tx_buf		*tx_buf;
-	dma_addr_t			tx_phys;
-	unsigned int			tx_free_idx;
+	
+	struct fe_tx_ring               tx_ring;
 
 	struct fe_phy			*phy;
 	struct mii_bus			*mii_bus;
@@ -483,8 +497,6 @@
 	unsigned long			vlan_map;
 	struct work_struct		pending_work;
 	DECLARE_BITMAP(pending_flags, FE_FLAG_MAX);
-	u16				tx_ring_size;
-	u16				rx_ring_size;
 };
 
 extern const struct of_device_id of_fe_match[];
